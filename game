<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tic Tac Toe Game</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #1e293b 0%, #7c3aed 50%, #1e293b 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 1rem;
        }

        .game-container {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 1rem;
            box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
            padding: 2rem;
            width: 100%;
            max-width: 400px;
        }

        .game-title {
            text-align: center;
            font-size: 2rem;
            font-weight: bold;
            color: #1f2937;
            margin-bottom: 1.5rem;
        }

        .score-board {
            background: linear-gradient(90deg, #faf5ff 0%, #eff6ff 100%);
            border-radius: 0.5rem;
            padding: 1rem;
            margin-bottom: 1rem;
            display: flex;
            justify-content: space-around;
            align-items: center;
        }

        .player-score {
            text-align: center;
        }

        .player-symbol {
            font-size: 1.25rem;
            font-weight: 900;
            margin-bottom: 0.25rem;
        }

        .player-x {
            color: #2563eb;
        }

        .player-o {
            color: #dc2626;
        }

        .player-name {
            font-size: 0.875rem;
            color: #6b7280;
            margin-bottom: 0.25rem;
        }

        .score {
            font-size: 1.125rem;
            font-weight: bold;
        }

        .vs-text {
            font-size: 1.5rem;
            color: #9ca3af;
            font-weight: bold;
        }

        .game-status {
            text-align: center;
            margin-bottom: 1.5rem;
        }

        .status-badge {
            background: #3b82f6;
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 0.5rem;
            font-size: 0.875rem;
            font-weight: 500;
        }

        .status-badge.winner {
            background: #10b981;
        }

        .status-badge.draw {
            background: #6b7280;
        }

        .game-board {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 0.5rem;
            margin: 0 auto 1.5rem;
            width: fit-content;
        }

        .cell {
            width: 4rem;
            height: 4rem;
            border: 2px solid #d8b4fe;
            border-radius: 0.5rem;
            background: linear-gradient(135deg, #ffffff 0%, #faf5ff 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            font-weight: 900;
            cursor: pointer;
            transition: all 0.2s ease;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        }

        .cell:hover:not(:disabled) {
            background: linear-gradient(135deg, #faf5ff 0%, #e0e7ff 100%);
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
            transform: translateY(-1px);
        }

        .cell:disabled {
            cursor: not-allowed;
        }

        .cell.x {
            color: #2563eb;
        }

        .cell.o {
            color: #dc2626;
        }

        .controls {
            display: flex;
            justify-content: center;
            gap: 0.5rem;
        }

        .btn {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem 1rem;
            border: 1px solid;
            border-radius: 0.5rem;
            font-size: 0.875rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
            text-decoration: none;
        }

        .btn-new-game {
            background: linear-gradient(90deg, #f0fdf4 0%, #eff6ff 100%);
            color: #15803d;
            border-color: #bbf7d0;
        }

        .btn-new-game:hover {
            background: linear-gradient(90deg, #dcfce7 0%, #dbeafe 100%);
            color: #166534;
        }

        .btn-reset {
            background: linear-gradient(90deg, #fef2f2 0%, #fff7ed 100%);
            color: #b91c1c;
            border-color: #fecaca;
            font-weight: 600;
        }

        .btn-reset:hover {
            background: linear-gradient(90deg, #fee2e2 0%, #fed7aa 100%);
            color: #991b1b;
        }

        .icon {
            width: 1rem;
            height: 1rem;
        }

        @media (max-width: 480px) {
            .game-container {
                padding: 1.5rem;
            }
            
            .cell {
                width: 3.5rem;
                height: 3.5rem;
                font-size: 1.25rem;
            }
            
            .controls {
                flex-direction: column;
            }
            
            .btn {
                justify-content: center;
            }
        }
    </style>
</head>
<body>
    <div class="game-container">
        <h1 class="game-title">Tic Tac Toe</h1>
        
        <div class="score-board">
            <div class="player-score">
                <div class="player-symbol player-x">X</div>
                <div class="player-name">Player 1</div>
                <div class="score player-x" id="x-score">0</div>
            </div>
            <div class="vs-text">VS</div>
            <div class="player-score">
                <div class="player-symbol player-o">O</div>
                <div class="player-name">Player 2</div>
                <div class="score player-o" id="o-score">0</div>
            </div>
        </div>

        <div class="game-status">
            <span class="status-badge" id="status">Player X's turn</span>
        </div>

        <div class="game-board" id="board">
            <button class="cell" data-index="0"></button>
            <button class="cell" data-index="1"></button>
            <button class="cell" data-index="2"></button>
            <button class="cell" data-index="3"></button>
            <button class="cell" data-index="4"></button>
            <button class="cell" data-index="5"></button>
            <button class="cell" data-index="6"></button>
            <button class="cell" data-index="7"></button>
            <button class="cell" data-index="8"></button>
        </div>

        <div class="controls">
            <button class="btn btn-new-game" id="new-game">
                <svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                </svg>
                New Game
            </button>
            <button class="btn btn-reset" id="reset-scores">Reset Scores</button>
        </div>
    </div>

    <script>
        class TicTacToe {
            constructor() {
                this.board = Array(9).fill(null);
                this.currentPlayer = 'X';
                this.winner = null;
                this.isDraw = false;
                this.xWins = 0;
                this.oWins = 0;
                
                this.winningCombinations = [
                    [0, 1, 2], [3, 4, 5], [6, 7, 8], // Rows
                    [0, 3, 6], [1, 4, 7], [2, 5, 8], // Columns
                    [0, 4, 8], [2, 4, 6] // Diagonals
                ];
                
                this.initializeGame();
            }
            
            initializeGame() {
                this.bindEvents();
                this.updateDisplay();
            }
            
            bindEvents() {
                const cells = document.querySelectorAll('.cell');
                cells.forEach(cell => {
                    cell.addEventListener('click', (e) => {
                        const index = parseInt(e.target.dataset.index);
                        this.handleCellClick(index);
                    });
                });
                
                document.getElementById('new-game').addEventListener('click', () => {
                    this.resetGame();
                });
                
                document.getElementById('reset-scores').addEventListener('click', () => {
                    this.resetAllScores();
                });
            }
            
            handleCellClick(index) {
                if (this.board[index] || this.winner || this.isDraw) return;
                
                this.board[index] = this.currentPlayer;
                this.updateCellDisplay(index);
                
                const gameWinner = this.checkWinner();
                if (gameWinner) {
                    this.winner = gameWinner;
                    if (gameWinner === 'X') {
                        this.xWins++;
                    } else {
                        this.oWins++;
                    }
                } else if (this.checkDraw()) {
                    this.isDraw = true;
                } else {
                    this.currentPlayer = this.currentPlayer === 'X' ? 'O' : 'X';
                }
                
                this.updateDisplay();
            }
            
            checkWinner() {
                for (const [a, b, c] of this.winningCombinations) {
                    if (this.board[a] && this.board[a] === this.board[b] && this.board[a] === this.board[c]) {
                        return this.board[a];
                    }
                }
                return null;
            }
            
            checkDraw() {
                return this.board.every(cell => cell !== null) && !this.checkWinner();
            }
            
            updateCellDisplay(index) {
                const cell = document.querySelector(`[data-index="${index}"]`);
                const player = this.board[index];
                if (player) {
                    cell.textContent = player;
                    cell.classList.add(player.toLowerCase());
                    cell.disabled = true;
                }
            }
            
            updateDisplay() {
                // Update status
                const statusElement = document.getElementById('status');
                const statusBadge = statusElement;
                
                if (this.winner) {
                    statusElement.textContent = `Player ${this.winner} wins! 🎉`;
                    statusBadge.className = 'status-badge winner';
                } else if (this.isDraw) {
                    statusElement.textContent = "It's a draw! 🤝";
                    statusBadge.className = 'status-badge draw';
                } else {
                    statusElement.textContent = `Player ${this.currentPlayer}'s turn`;
                    statusBadge.className = 'status-badge';
                }
                
                // Update scores
                document.getElementById('x-score').textContent = this.xWins;
                document.getElementById('o-score').textContent = this.oWins;
                
                // Update cell states
                const cells = document.querySelectorAll('.cell');
                cells.forEach((cell, index) => {
                    cell.disabled = !!(this.board[index] || this.winner || this.isDraw);
                });
            }
            
            resetGame() {
                this.board = Array(9).fill(null);
                this.currentPlayer = 'X';
                this.winner = null;
                this.isDraw = false;
                
                const cells = document.querySelectorAll('.cell');
                cells.forEach(cell => {
                    cell.textContent = '';
                    cell.className = 'cell';
                    cell.disabled = false;
                });
                
                this.updateDisplay();
            }
            
            resetAllScores() {
                this.xWins = 0;
                this.oWins = 0;
                this.resetGame();
            }
        }
        
        // Initialize the game when the page loads
        document.addEventListener('DOMContentLoaded', () => {
            new TicTacToe();
        });
    </script>
</body>
</html>
